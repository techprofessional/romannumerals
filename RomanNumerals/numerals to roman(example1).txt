Java code. 

The chain of numerals could be defined like this.
private static Numeral[] numerals = new Numeral[] {
  new Numeral("M", 1000),
  new Numeral("CM", 900),
  new Numeral("D", 500),
  new Numeral("CD", 400),
  new Numeral("C", 100),
  new Numeral("XC", 90),
  new Numeral("L", 50),
  new Numeral("XL", 40),
  new Numeral("X", 10),
  new Numeral("IX", 9), 
  new Numeral("V", 5), 
  new Numeral("IV", 4),
  new Numeral("I", 1)};

I created a Numeral class to encapsulate roman numeral and the value it represents.
public class Numeral {

  private String romanNumeral;
  private int value;

  public String getRomanNumeral() {
    return romanNumeral;
  }

  public int getValue() {
    return value;
  }

  public Numeral(String romanNumeral, int value) {
    this.romanNumeral = romanNumeral;
    this.value = value;
  }

}

And here is how a convert method might look like…

public static String convert(int amount) {
  // introducing variable for less confusion
  // avoid multiple semantic for one variable
  int rest = amount;
  // using StringBuilder makes string 
  // concatenation more efficient
  StringBuilder result = new StringBuilder();
  int idxOfCurrentNumeral = 0;
  Numeral currentNumeral = numerals[idxOfCurrentNumeral];
  while (rest > 0) {
    if (currentNumeral.getValue() <= rest) {
      // add the literal to the result and subtract 
      // its value from the rest
      result.append(currentNumeral.getRomanNumeral());
      rest -= currentNumeral.getValue();
    } else {
      // move on to the next (less-valued) literal
      idxOfCurrentNumeral++;
      currentNumeral = numerals[idxOfCurrentNumeral];
    }
  }
  return result.toString();
}

The test cases, that were accumulated during the TDD session, are the following (using a parameterized junit test).
  @Parameters
  public static Collection<Object[]> data() {
    Object[][] data = new Object[][] {
      {1, "I"},
      {2, "II"},
      {3, "III"},
      {4, "IV"},
      {5, "V"},
      {6, "VI"},
      {7, "VII"},
      {8, "VIII"},
      {9, "IX"},
      {10, "X"},
      {40, "XL"},
      {49, "XLIX"},
      {50, "L"},
      {90, "XC"},
      {100, "C"},
      {400, "CD"},
      {500, "D"},
      {900, "CM"},
      {999, "CMXCIX"},
      {1000, "M"}		
    };
    return Arrays.asList(data);
  }

  @Test
  public void test() {
    Assert.assertEquals(expectedOutput, DecimalToRomanConverter.convert(input));
  }